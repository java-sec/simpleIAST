package com.keven1z.core.vulnerability.detectors;


import com.keven1z.core.graph.taint.TaintData;
import com.keven1z.core.log.ErrorType;
import com.keven1z.core.log.LogTool;
import com.keven1z.core.vulnerability.VulnerabilityDetector;

import java.util.*;

/**
 * @author keven1z
 * @date 2023/01/15
 */
public class VulnerabilityDetectorComposite implements VulnerabilityDetector {
    private final List<VulnerabilityDetector> detectors =
            new LinkedList<>();


    @Override
    public boolean detect(LinkedList<TaintData> taints, List<String> sourceList) {
        try {
            return doDetect(taints, sourceList);
        }
        catch (Exception e){
            LogTool.warn(ErrorType.DETECT_VULNERABILITY_ERROR, "An exception occurred during vulnerability scanning");
            return false;
        }
    }
    private boolean doDetect(LinkedList<TaintData> taints, List<String> sourceList){
        TaintData sink = taints.getLast();
        String vulnType = sink.getVulnType();
        VulnerabilityDetector detector = getDetector(vulnType);
        if (detector == null) {
            LogTool.warn(ErrorType.DETECT_VULNERABILITY_ERROR, "Failed to getDetector,detector is null,vulnerability type is " + vulnType);
            return false;
        }
        return detector.detect(taints, sourceList);
    }

    @Override
    public boolean supportVulnerabilityType(String type) {
        return getDetector(type) != null;
    }

    private VulnerabilityDetector getDetector(String type) {
        for (VulnerabilityDetector detector : detectors) {
            if (detector.supportVulnerabilityType(type)) {
                return detector;
            }
        }
        return null;
    }

    /**
     * 返回一个只读的hook集合
     */
    public List<VulnerabilityDetector> getDetectors() {
        return Collections.unmodifiableList(this.detectors);
    }

    public void addDetector(VulnerabilityDetector detector) {
        if (detector == null) {
            return;
        }
        detectors.add(detector);
    }

    /**
     * 清除分发器集合
     */
    public void clear() {
        this.detectors.clear();
    }


}
